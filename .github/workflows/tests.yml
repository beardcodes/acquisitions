name: Tests

on:
  push:
    branches: [main, staging]
  pull_request:
    branches: [main, staging]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    env:
      NODE_ENV: test
      NODE_OPTIONS: --experimental-vm-modules
      DATABASE_URL: ${{ secrets.DATABASE_URL || 'postgresql://test:test@localhost:5432/test_db' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        id: test
        run: |
          npm test -- --coverage --coverageReporters=text --coverageReporters=json-summary --coverageReporters=lcov

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-${{ github.sha }}
          path: |
            coverage/
            !coverage/tmp/
          retention-days: 30

      - name: Generate test summary
        if: always()
        run: |
          echo "## 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f coverage/coverage-summary.json ]; then
            echo "### 📊 Coverage Summary" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Extract coverage data from coverage-summary.json
            LINES=$(cat coverage/coverage-summary.json | grep -o '"lines":{"total":[0-9]*,"covered":[0-9]*,"skipped":[0-9]*,"pct":[0-9.]*}' | grep -o '"pct":[0-9.]*' | cut -d':' -f2)
            FUNCTIONS=$(cat coverage/coverage-summary.json | grep -o '"functions":{"total":[0-9]*,"covered":[0-9]*,"skipped":[0-9]*,"pct":[0-9.]*}' | grep -o '"pct":[0-9.]*' | cut -d':' -f2)
            BRANCHES=$(cat coverage/coverage-summary.json | grep -o '"branches":{"total":[0-9]*,"covered":[0-9]*,"skipped":[0-9]*,"pct":[0-9.]*}' | grep -o '"pct":[0-9.]*' | cut -d':' -f2)
            STATEMENTS=$(cat coverage/coverage-summary.json | grep -o '"statements":{"total":[0-9]*,"covered":[0-9]*,"skipped":[0-9]*,"pct":[0-9.]*}' | grep -o '"pct":[0-9.]*' | cut -d':' -f2)
            
            echo "| Coverage Type | Percentage |" >> $GITHUB_STEP_SUMMARY
            echo "|---------------|------------|" >> $GITHUB_STEP_SUMMARY
            echo "| Lines | ${LINES}% |" >> $GITHUB_STEP_SUMMARY
            echo "| Functions | ${FUNCTIONS}% |" >> $GITHUB_STEP_SUMMARY
            echo "| Branches | ${BRANCHES}% |" >> $GITHUB_STEP_SUMMARY
            echo "| Statements | ${STATEMENTS}% |" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Coverage report not found" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ℹ️ Test Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Node.js:** $(node --version)" >> $GITHUB_STEP_SUMMARY
          echo "- **npm:** $(npm --version)" >> $GITHUB_STEP_SUMMARY

      - name: Annotate test failures
        if: failure() && steps.test.outcome == 'failure'
        run: |
          echo "::error title=Test Failures::Some tests failed. Please check the test output above for details."
          echo "::notice title=Debug Info::You can run tests locally with 'npm test' to debug failing tests."

      - name: Success notification
        if: success()
        run: |
          echo "::notice title=Tests Passed::All tests passed successfully! ✅"
